<application>
  <component name="AppStorage">
    <histories>
      <item value="Called by RecyclerView when it stops observing this Adapter." />
      <item value="Indicates the activation state of this view. * * @return true if the view is activated, false otherwise */" />
      <item value="notation" />
      <item value="risk" />
      <item value="/** * This is called when the view is detached from a window. At this point it * no longer has a surface for drawing. *" />
      <item value="The interval along the way to receive * {@link #onTick(long)} callbacks." />
      <item value="The number of millis in the future from the call * to {@link #start()} until the countdown is done and {@link #onFinish()} * is called." />
      <item value="prepare Sell Mall Js" />
      <item value="delete Expired If Need" />
      <item value="The distance (in pixels) between the start edge of the item view and * start edge of the RecyclerView." />
      <item value="program Init" />
      <item value="Notify any registered observers that the item at &lt;code&gt;position&lt;/code&gt; has changed. * Equivalent to calling &lt;code&gt;notifyItemChanged(position, null);&lt;/code&gt;. *" />
      <item value="he current value of the user-visible hint on this fragment." />
      <item value="* Returns the value of this {@code Long} as an {@code int} after * a narrowing primitive conversion." />
      <item value="Defines what this animation should do when it reaches the end. This * setting is applied only when the repeat count is either greater than * 0 or {@link #INFINITE}. Defaults to {@link #RESTART}. *" />
      <item value="Sets the length of the animation. The default duration is 300 milliseconds." />
      <item value="show Slot Toast" />
      <item value="Pooled class that orderes the children of a ViewGroup from start * to end based on how they are laid out and the layout direction. */" />
      <item value="Returns the adapter position of the last fully visible view. This position does not include * adapter changes that were dispatched after the last layout pass. * &lt;p&gt;" />
      <item value="Returns the View type defined by the adapter" />
      <item value="show Product Seat Tip" />
      <item value="DisplayMetrics to be used for real dimension calculations * @return The time (in ms) it should take for each pixel. For instance, if returned value is * 2 ms, it means scrolling 1000 pixels with LinearInterpolation should take 2 seconds." />
      <item value="Calculates the scroll speed." />
      <item value="TARGET SEEK SCROLL DISTANCE PX" />
      <item value="The screen density expressed as dots-per-inch." />
      <item value="calculate Speed Per Pixel" />
      <item value="MILLISECONDS PER INCH" />
      <item value="Calculates the scroll speed. * * @param displayMetrics DisplayMetrics to be used for real dimension calculations * @return The time (in ms) it should take for each pixel. For instance, if returned value is * 2 ms, it means scrolling 1000 pixels with LinearInterpolation should take 2 seconds." />
      <item value="SCROLL" />
      <item value="injector" />
      <item value="Tinker Uncaught Handler" />
      <item value="Error parsing XML: not well-formed (invalid token)" />
      <item value="Found item Attr/pstsIndicatorColor more than one time" />
      <item value="Sets the properties of this field to transform input to ALL CAPS * display. This may use a &quot;small caps&quot; formatting if available. * This setting will be ignored if this field is editable or selectable. *" />
      <item value="Sets the opacity of the view to a value from 0 to 1, where 0 means the view is * completely transparent and 1 means the view is completely opaque. *" />
      <item value="Align child view's left or top with parent view's left or top *" />
      <item value="You must override smoothScrollToPosition to support smooth scrolling" />
      <item value="&gt;Causes the Runnable to execute on the next animation time step. * The runnable will be run on the user interface thread.&lt;/p&gt; *" />
      <item value="Starts a smooth scroll using the provided SmoothScroller.&lt;/p&gt;" />
      <item value="* If some part of this view is not clipped by any of its parents, then * return that area in r in global (root) coordinates. To convert r to local * coordinates (without taking possible View rotations into account), offset * it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)). * If the view is completely clipped or translated out, return false. *" />
      <item value="* &lt;p&gt;Computes the coordinates of this view on the screen. The argument * must be an array of two integers. After the method returns, the array * contains the x and y location in that order.&lt;/p&gt; *" />
      <item value="* * &lt;p&gt;Computes the coordinates of this view in its window. The argument * must be an array of two integers. After the method returns, the array * contains the x and y location in that order.&lt;/p&gt; *" />
      <item value="DIAGONAL FROM TOP LEFT" />
      <item value="is Side Selection" />
      <item value="STATE COMPLETE" />
      <item value="false" />
      <item value="Value in pixels indicating the offset from position" />
      <item value="The end-user-visible name for the end product." />
      <item value="uncaughtException:Attempt to invoke virtual method 'void android.support.v7.widget.StaggeredGridLayoutManager$LayoutParams.setFullSpan(boolean)' on a null object reference" />
      <item value="Returns the number of spans laid out by this grid. *" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="243" />
        <entry key="ENGLISH" value="244" />
        <entry key="POLISH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>