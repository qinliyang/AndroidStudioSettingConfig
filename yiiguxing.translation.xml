<application>
  <component name="AppStorage">
    <histories>
      <item value="Remove an existing fragment. If it was added to a container, its view * is also removed from that container." />
      <item value="found" />
      <item value="otherwise" />
      <item value="The fragment if found or null otherwise." />
      <item value="if no such fragment is found, then all fragments currently * on the back stack associated with this ID are searched." />
      <item value="This first * searches through fragments that are currently added to the manager's * activity;" />
      <item value="Finds a fragment that was identified by the given id either when inflated * from XML or as the container ID when added in a transaction." />
      <item value="either" />
      <item value="identified" />
      <item value="Finds a fragment that was identified by the given id either when inflated * from XML or as the container ID when added in a transaction. This first * searches through fragments that are currently added to the manager's * activity; if no such fragment is found, then all fragments currently * on the back stack associated with this ID are searched. * @return The fragment if found or null otherwise." />
      <item value="Add a fragment to the activity state. This fragment may optionally * also have its view (if {@link Fragment#onCreateView Fragment.onCreateView} * returns non-null) inserted into a container view of the activity. *" />
      <item value="Replace an existing fragment that was added to a container. This is * essentially the same as calling {@link #remove(Fragment)} for all * currently added fragments that were added with the same containerViewId * and then {@link #add(int, Fragment, String)} with the same arguments * given here." />
      <item value="Optional tag name for the fragment, to later retrieve the * fragment with {@link FragmentManager#findFragmentByTag(String)" />
      <item value="Returns milliseconds running in the current thread." />
      <item value="Add this transaction to the back stack. This means that the transaction * will be remembered after it is committed, and will reverse its operation * when later popped off the stack." />
      <item value="Pop the top state off the back stack. This function is asynchronous -- it * enqueues the request to pop, but the action will not be performed until the * application returns to its event loop." />
      <item value="If set, this activity will become the start of a new task on this * history stack. A task (from the activity that started it to the * next task activity) defines an atomic group of activities that the * user can move to. Tasks can be moved to the foreground and background; * all of the activities inside of a particular task always remain in * the same order." />
      <item value="Move the task containing this activity to the back of the activity * stack. The activity's order within the task is unchanged. *" />
      <item value="* &lt;p&gt;This flag can not be used when the caller is requesting a result from * the activity being launched." />
      <item value="* Add an {@link OnItemTouchListener} to intercept touch events before they are dispatched * to child views or this view's standard scrolling behavior. *" />
      <item value="Add an {@link OnItemTouchListener} to intercept touch events before they are dispatched * to child views or this view's standard scrolling behavior. *" />
      <item value="When an object of a type is attached to an Editable, its methods will * be called when the text is changed." />
      <item value="broken" />
      <item value="disposed" />
      <item value="Generic" />
      <item value="Native Fetch Module" />
      <item value="* Returns the closest {@code int} to the argument, with ties * rounding to positive infinity. *" />
      <item value="Gets the current rating (number of stars filled)." />
      <item value="Retrieve the Drawable for the attribute at &lt;var&gt;index&lt;/var&gt;." />
      <item value="Specify a bounding rectangle for the Drawable. This is where the drawable * will draw when its draw() method is called." />
      <item value="set Requested Orientation" />
      <item value="get QR Invite Bitmap" />
      <item value="thickness" />
      <item value="ring" />
      <item value="oval" />
      <item value="Returns the root project for the hierarchy that this project belongs to. In the case of a single-project * build, this method returns this project" />
      <item value="features" />
      <item value="Deprecated" />
      <item value="incompatible" />
      <item value="is Redirect Payment" />
      <item value="* direct or via its iterator, result in an" />
      <item value="specified" />
      <item value="through" />
      <item value="operations" />
      <item value="unmodifiable" />
      <item value="Searches the query string for the first value with the given key." />
      <item value="which will be encoded" />
      <item value="&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Prior to Jelly Bean, this decoded * the '+' character as '+' rather than ' '." />
      <item value="denoted" />
      <item value="Invocation Handler" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="459" />
        <entry key="ENGLISH" value="460" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>