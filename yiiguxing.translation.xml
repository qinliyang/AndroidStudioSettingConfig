<application>
  <component name="AppStorage">
    <histories>
      <item value="* Sets the opacity of the view to a value from 0 to 1, where 0 means the view is * completely transparent and 1 means the view is completely opaque. *" />
      <item value="is Native" />
      <item value="You cannot start a load for a destroyed activity" />
      <item value="Return the context of the single, global Application object of the * current process. This generally should only be used if you need a * Context whose lifecycle is separate from the current context, that is * tied to the lifetime of the process rather than the current component. *" />
      <item value="* Returns the hash code value for this list. The hash code of a list" />
      <item value="Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains all of the elements of the * specified collection." />
      <item value="Retains only the elements in this list that are contained in the * specified collection (optional operation). In other words, removes * from this list all of its elements that are not contained in the * specified collection." />
      <item value="No Such Field Exception" />
      <item value="show Json Single Line" />
      <item value="allow Modify Server Data" />
      <item value="generate Tag" />
      <item value="/** * Returns an array of stack trace elements representing the stack dump * of this thread. This method will return a zero-length array if * this thread has not started, has started but has not yet been * scheduled to run by the system, or has terminated. * If the returned array is of non-zero length then the first element of * the array represents the top of the stack, which is the most recent * method invocation in the sequence. The last element of the array * represents the bottom of the stack, which is the least recent method * invocation in the sequence. *" />
      <item value="&quot;DeadSystemException: The system died; &quot; + &quot;earlier logs will point to the root cause&quot;" />
      <item value="At least assume you can print *some* characters (tag is not too large)." />
      <item value="Note: we implicitly accept possible truncation for Modified-UTF8 differences. It // is too expensive to compute that ahead of time." />
      <item value="Causes the Runnable r to be added to the message queue. * The runnable will be run on the thread to which this handler is * attached. *" />
      <item value="anim Length Rand" />
      <item value="anim Length" />
      <item value="Can't convert value at index 9 to dimension: type=0x10" />
      <item value="Unsupported Operation Exception" />
      <item value="Helper for getTransformation. Subclasses should implement this to apply * their transforms given an interpolation value. Implementations of this * method should always replace the specified Transformation or document * they are doing otherwise." />
      <item value="1.0 means fully opaqe and 0.0 means fully transparent" />
      <item value="apply Transformation" />
      <item value="Float Animation" />
      <item value="* Attempts to get the ViewHolder for the given position, either from the Recycler scrap, * cache, the RecycledViewPool, or creating it directly. * &lt;p&gt;" />
      <item value="try Get View Holder For Position By Deadline" />
      <item value="The view does not have a ViewHolder." />
      <item value="he view does not have a ViewHolder. You cannot&quot; + &quot; pass arbitrary views to this method, they should be created by the &quot;" />
      <item value="** * {@link android.view.ViewGroup.MarginLayoutParams LayoutParams} subclass for children of * {@link RecyclerView}. Custom {@link LayoutManager layout managers} are encouraged * to create their own subclass of this &lt;code&gt;LayoutParams&lt;/code&gt; class * to store any additional required per-child view metadata about the layout. */" />
      <item value="RecyclerView provides artificial position range (item count) in pre-layout state and * automatically maps these positions to {@link Adapter} positions when * {@link #getViewForPosition(int)} or {@link #bindViewToPosition(View, int)} is called. * &lt;p&gt;" />
      <item value="Returns the adapter position of the ViewHolder in the latest layout pass. * @see #getAdapterPosition()" />
      <item value="* Returns the adapter position of the item represented by the given View. This does not * contain any adapter changes that might have happened after the last layout. *" />
      <item value="Returns the first child that is visible in the provided index range, i.e. either partially or // fully visible depending on the arguments provided. Completely invisible children are not // acceptable by this method, but could be returned // using #findOnePartiallyOrCompletelyInvisibleChild" />
      <item value="* Returns true if the {@link RecyclerView} is in the pre-layout step where it is having its * {@link LayoutManager} layout items where they will be at the beginning of a set of * predictive item animations." />
      <item value="validate View Holder For Offset Position" />
      <item value="don't check type if it is pre-layout." />
      <item value="* Mark an attached view as scrap." />
      <item value="Return the view type of the item at &lt;code&gt;position&lt;/code&gt; for the purposes * of view recycling." />
      <item value="get Slim Injector Actual Type Arguments" />
      <item value="Performs a bulk transaction on the given endpoint. * The direction of the transfer is determined by the direction of the endpoint. * * @param endpoint the endpoint for this transaction * @param buffer buffer for data to send or receive * @param offset the index of the first byte in the buffer to send or receive * @param length the length of the data to send or receive * @param timeout in milliseconds, 0 is infinite * @return length of data transferred (or zero) for success, * or negative value for failure" />
      <item value="LIVING" />
      <item value="The second layout step where we do the actual layout of the views for the final state. * This step might be run multiple times if necessary (e.g. measure). */ private void" />
      <item value="Layout state should be one of 100 but it is 10" />
      <item value="get Product Stock Complaint" />
      <item value="/** * Transform an Observable by applying a particular Transformer function to it. * &lt;p&gt;" />
      <item value="A {@linkplain CallAdapter.Factory call adapter} which uses RxJava for creating observables. * &lt;p&gt;" />
      <item value="failed" />
      <item value="Value in pixels indicating the offset from position." />
      <item value="Value from [0, 1) indicating the offset from the page at position." />
      <item value="You must not call setTag() on a view Glide is targeting" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="976" />
        <entry key="ENGLISH" value="977" />
        <entry key="POLISH" value="3" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>