<application>
  <component name="AppStorage">
    <histories>
      <item value="skip Memory Cache" />
      <item value="skip Memory Cache Of" />
      <item value="Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set." />
      <item value="* Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS * connections rely on only the {@link #sslSocketFactory SSL socket factory} to establish trust. * Pinning certificates avoids the need to trust certificate authorities. */" />
      <item value="Called by RecyclerView when it starts observing this Adapter." />
      <item value="Layout state should be one of 100 but it is 10" />
      <item value="m Max Distance" />
      <item value="Only show over-scroll effects if the content is large enough to meaningfully scroll." />
      <item value="Never show over-scroll effects." />
      <item value="Always show over-scroll effects, even if the content fits entirely within the available space." />
      <item value="No resource identifier found for attribute" />
      <item value="identifier" />
      <item value="Check if this view can be scrolled vertically in a certain direction." />
      <item value="@param direction Negative to check scrolling up, positive to check scrolling down." />
      <item value="get Velocity By Distance" />
      <item value="invalid" />
      <item value="should be opaque" />
      <item value="A TaskDescription's primary color should be opaque" />
      <item value="Cannot call this method while RecyclerView is computing a layout or scrolling android.support.v7.widget.RecyclerView" />
      <item value="Popup" />
      <item value="Calls the specified function [block] with `this` value as its receiver and returns `this` value." />
      <item value="Returns the inverse of this boolean." />
      <item value="Calls the specified function [block] with `this` value as its receiver and returns its result." />
      <item value="assort" />
      <item value="fling" />
      <item value="Returns" />
      <item value="Replaces the current adapter with the new one and triggers listeners." />
      <item value="Called when a view created by this adapter has been recycled." />
      <item value="* Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled * due to its transient state. Upon receiving this callback, Adapter can clear the * animation(s) that effect the View's transient state and return &lt;code&gt;true&lt;/code&gt; so that * the View can be recycled. Keep in mind that the View in question is already removed from * the RecyclerView." />
      <item value="The RecyclerView is currently being dragged by outside input such as user touch input." />
      <item value="The RecyclerView is not currently scrolling." />
      <item value="The RecyclerView is currently animating to a final position while not under * outside control." />
      <item value="IDLE" />
      <item value="SETTLING" />
      <item value="DRAGGING" />
      <item value="Return the current scrolling state of the RecyclerView." />
      <item value="&lt;p&gt;There are two different classes of data change events, item changes and structural * changes. Item changes are when a single item has its data updated but no positional * changes have occurred. Structural changes are when items are inserted, removed or moved * within the data set.&lt;/p&gt; * * &lt;p&gt;This event does not specify what about the data set has changed, forcing * any observers to assume that all existing items and structure may no longer be valid. * LayoutManagers will be forced to fully rebind and relayout all visible views.&lt;/p&gt; * * &lt;p&gt;&lt;code&gt;RecyclerView&lt;/code&gt; will attempt to synthesize visible structural change events * for adapters that report that they have {@link #hasStableIds() stable IDs} when * this method is used. This can help for the purposes of animation and visual * object persistence but individual item views will still need to be rebound * and relaid out.&lt;/p&gt; * * &lt;p&gt;If you are writing an adapter it will always be more efficient to use the more * specific change events if you can. Rely on &lt;code&gt;notifyDataSetChanged()&lt;/code&gt; * as a last resort.&lt;/p&gt; *" />
      <item value="Notify any registered observers that the data set has changed" />
      <item value="On Boarding Success Event" />
      <item value="Returns milliseconds running in the current thread." />
      <item value="Returns milliseconds since boot, not counting time spent in deep sleep." />
      <item value="угдтЈи" />
      <item value="rectangle" />
      <item value="Returns the absolute value of a {@code long} value. * If the argument is not negative, the argument is returned. * If the argument is negative, the negation of the argument is returned. *" />
      <item value="time long" />
      <item value="* This method calls {@link #onCreateViewHolder(ViewGroup, int)} to create a new * {@link ViewHolder} and initializes some private fields to be used by RecyclerView. *" />
      <item value="true if this view could ask the Handler to remove the Runnable, * false otherwise. When the returned value is true, the Runnable * may or may not have been actually removed from the message queue * (for instance, if the Runnable was not in the queue already.) *" />
      <item value="if the Runnable was successfully placed in to the * message queue. Returns false on failure, usually because the * looper processing the message queue is exiting. Note that a * result of true does not mean the Runnable will be processed -- * if the looper is quit before the delivery time of the message * occurs then the message will be dropped." />
      <item value="A set of information given to a view when it is attached to its parent" />
      <item value="p&gt;Removes the specified Runnable from the message queue.&lt;/p&gt;" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="301" />
        <entry key="ENGLISH" value="302" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>