<application>
  <component name="AppStorage">
    <histories>
      <item value="Replaces the current adapter with the new one and triggers listeners." />
      <item value="Called by RecyclerView when it starts observing this Adapter." />
      <item value="Called when a view created by this adapter has been recycled." />
      <item value="* Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled * due to its transient state. Upon receiving this callback, Adapter can clear the * animation(s) that effect the View's transient state and return &lt;code&gt;true&lt;/code&gt; so that * the View can be recycled. Keep in mind that the View in question is already removed from * the RecyclerView." />
      <item value="The RecyclerView is currently being dragged by outside input such as user touch input." />
      <item value="The RecyclerView is not currently scrolling." />
      <item value="The RecyclerView is currently animating to a final position while not under * outside control." />
      <item value="IDLE" />
      <item value="SETTLING" />
      <item value="DRAGGING" />
      <item value="Return the current scrolling state of the RecyclerView." />
      <item value="&lt;p&gt;There are two different classes of data change events, item changes and structural * changes. Item changes are when a single item has its data updated but no positional * changes have occurred. Structural changes are when items are inserted, removed or moved * within the data set.&lt;/p&gt; * * &lt;p&gt;This event does not specify what about the data set has changed, forcing * any observers to assume that all existing items and structure may no longer be valid. * LayoutManagers will be forced to fully rebind and relayout all visible views.&lt;/p&gt; * * &lt;p&gt;&lt;code&gt;RecyclerView&lt;/code&gt; will attempt to synthesize visible structural change events * for adapters that report that they have {@link #hasStableIds() stable IDs} when * this method is used. This can help for the purposes of animation and visual * object persistence but individual item views will still need to be rebound * and relaid out.&lt;/p&gt; * * &lt;p&gt;If you are writing an adapter it will always be more efficient to use the more * specific change events if you can. Rely on &lt;code&gt;notifyDataSetChanged()&lt;/code&gt; * as a last resort.&lt;/p&gt; *" />
      <item value="Notify any registered observers that the data set has changed" />
      <item value="On Boarding Success Event" />
      <item value="Returns milliseconds running in the current thread." />
      <item value="Returns milliseconds since boot, not counting time spent in deep sleep." />
      <item value="угдтЈи" />
      <item value="rectangle" />
      <item value="Returns the absolute value of a {@code long} value. * If the argument is not negative, the argument is returned. * If the argument is negative, the negation of the argument is returned. *" />
      <item value="time long" />
      <item value="* This method calls {@link #onCreateViewHolder(ViewGroup, int)} to create a new * {@link ViewHolder} and initializes some private fields to be used by RecyclerView. *" />
      <item value="true if this view could ask the Handler to remove the Runnable, * false otherwise. When the returned value is true, the Runnable * may or may not have been actually removed from the message queue * (for instance, if the Runnable was not in the queue already.) *" />
      <item value="if the Runnable was successfully placed in to the * message queue. Returns false on failure, usually because the * looper processing the message queue is exiting. Note that a * result of true does not mean the Runnable will be processed -- * if the looper is quit before the delivery time of the message * occurs then the message will be dropped." />
      <item value="A set of information given to a view when it is attached to its parent" />
      <item value="p&gt;Removes the specified Runnable from the message queue.&lt;/p&gt;" />
      <item value="Removes and recycles all views - both those currently attached, and those in the Recycler." />
      <item value="Deposit Activity" />
      <item value="Notify any registered observers that the &lt;code&gt;itemCount&lt;/code&gt; items starting at * position &lt;code&gt;positionStart&lt;/code&gt; have changed. * Equivalent to calling &lt;code&gt;notifyItemRangeChanged(position, itemCount, null);&lt;/code&gt;. *" />
      <item value="Called by RecyclerView when it stops observing this Adapter." />
      <item value="Indicates the activation state of this view. * * @return true if the view is activated, false otherwise */" />
      <item value="notation" />
      <item value="risk" />
      <item value="/** * This is called when the view is detached from a window. At this point it * no longer has a surface for drawing. *" />
      <item value="The interval along the way to receive * {@link #onTick(long)} callbacks." />
      <item value="The number of millis in the future from the call * to {@link #start()} until the countdown is done and {@link #onFinish()} * is called." />
      <item value="prepare Sell Mall Js" />
      <item value="delete Expired If Need" />
      <item value="The distance (in pixels) between the start edge of the item view and * start edge of the RecyclerView." />
      <item value="program Init" />
      <item value="Notify any registered observers that the item at &lt;code&gt;position&lt;/code&gt; has changed. * Equivalent to calling &lt;code&gt;notifyItemChanged(position, null);&lt;/code&gt;. *" />
      <item value="he current value of the user-visible hint on this fragment." />
      <item value="* Returns the value of this {@code Long} as an {@code int} after * a narrowing primitive conversion." />
      <item value="Defines what this animation should do when it reaches the end. This * setting is applied only when the repeat count is either greater than * 0 or {@link #INFINITE}. Defaults to {@link #RESTART}. *" />
      <item value="Sets the length of the animation. The default duration is 300 milliseconds." />
      <item value="show Slot Toast" />
      <item value="Pooled class that orderes the children of a ViewGroup from start * to end based on how they are laid out and the layout direction. */" />
      <item value="Returns the adapter position of the last fully visible view. This position does not include * adapter changes that were dispatched after the last layout pass. * &lt;p&gt;" />
      <item value="Returns the View type defined by the adapter" />
      <item value="show Product Seat Tip" />
      <item value="DisplayMetrics to be used for real dimension calculations * @return The time (in ms) it should take for each pixel. For instance, if returned value is * 2 ms, it means scrolling 1000 pixels with LinearInterpolation should take 2 seconds." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="276" />
        <entry key="ENGLISH" value="277" />
        <entry key="POLISH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>