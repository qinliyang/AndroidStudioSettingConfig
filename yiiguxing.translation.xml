<application>
  <component name="AppStorage">
    <histories>
      <item value="Negative to check scrolling up, positive to check scrolling down." />
      <item value="srl Enable Over Scroll Drag" />
      <item value="MILLISECONDS PER PX" />
      <item value="p&gt;Calculates the time for deceleration so that transition from LinearInterpolator to * DecelerateInterpolator looks" />
      <item value="SNAP TO START" />
      <item value="milliseconds" />
      <item value="calculate Speed Per Pixel" />
      <item value="&lt;p&gt;Calculates the time for deceleration so that transition from LinearInterpolator to * DecelerateInterpolator looks smooth.&lt;/p&gt; * * @param dx Distance to scroll * @return Time for DecelerateInterpolator to smoothly traverse the distance when transitioning * from LinearInterpolation" />
      <item value="In a case where dx is very small, rounding may return 0 although dx &gt; 0. // To avoid that issue, ceil the result so that if dx &gt; 0, we'll always return positive // time." />
      <item value="Calculates the time it should take to scroll the given distance (in pixels)" />
      <item value="calculate Time For Scrolling" />
      <item value="ceil" />
      <item value="off Set" />
      <item value="Set a hint to the system about whether this fragment's UI is currently visible * to the user. This hint defaults to true and is persistent across fragment instance * state save and restore. * * &lt;p&gt;An app may set this to false to indicate that the fragment's UI is * scrolled out of visibility or is otherwise not directly visible to the user. * This may be used by the system to prioritize operations such as fragment lifecycle updates * or loader ordering behavior.&lt;/p&gt; *" />
      <item value="Set a hint to the system about whether this fragment's UI is currently visible * to the user. This hint defaults to true and is persistent across fragment instance * state save and restore." />
      <item value="Add a listener that will be notified of any changes in scroll state or position. *" />
      <item value="skip Memory Cache" />
      <item value="skip Memory Cache Of" />
      <item value="Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set." />
      <item value="* Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS * connections rely on only the {@link #sslSocketFactory SSL socket factory} to establish trust. * Pinning certificates avoids the need to trust certificate authorities. */" />
      <item value="Called by RecyclerView when it starts observing this Adapter." />
      <item value="Layout state should be one of 100 but it is 10" />
      <item value="m Max Distance" />
      <item value="Only show over-scroll effects if the content is large enough to meaningfully scroll." />
      <item value="Never show over-scroll effects." />
      <item value="Always show over-scroll effects, even if the content fits entirely within the available space." />
      <item value="No resource identifier found for attribute" />
      <item value="identifier" />
      <item value="Check if this view can be scrolled vertically in a certain direction." />
      <item value="@param direction Negative to check scrolling up, positive to check scrolling down." />
      <item value="get Velocity By Distance" />
      <item value="invalid" />
      <item value="should be opaque" />
      <item value="A TaskDescription's primary color should be opaque" />
      <item value="Cannot call this method while RecyclerView is computing a layout or scrolling android.support.v7.widget.RecyclerView" />
      <item value="Popup" />
      <item value="Calls the specified function [block] with `this` value as its receiver and returns `this` value." />
      <item value="Returns the inverse of this boolean." />
      <item value="Calls the specified function [block] with `this` value as its receiver and returns its result." />
      <item value="assort" />
      <item value="fling" />
      <item value="Returns" />
      <item value="Replaces the current adapter with the new one and triggers listeners." />
      <item value="Called when a view created by this adapter has been recycled." />
      <item value="* Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled * due to its transient state. Upon receiving this callback, Adapter can clear the * animation(s) that effect the View's transient state and return &lt;code&gt;true&lt;/code&gt; so that * the View can be recycled. Keep in mind that the View in question is already removed from * the RecyclerView." />
      <item value="The RecyclerView is currently being dragged by outside input such as user touch input." />
      <item value="The RecyclerView is not currently scrolling." />
      <item value="The RecyclerView is currently animating to a final position while not under * outside control." />
      <item value="IDLE" />
      <item value="SETTLING" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="317" />
        <entry key="ENGLISH" value="318" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>