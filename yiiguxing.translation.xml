<application>
  <component name="AppStorage">
    <histories>
      <item value="Only one Looper may be created per thread" />
      <item value="sThreadLocal.get() will return null unless you've called prepare()." />
      <item value="s Thread Local" />
      <item value="Return the Looper object associated with the current thread. Returns * null if the calling thread is not associated with a Looper. */" />
      <item value="Use Looper.myLooper() if looper is not specified." />
      <item value="Replace an existing fragment that was added to a container. This is * essentially the same as calling {@link #remove(Fragment)} for all * currently added fragments that were added with the same containerViewId * and then {@link #add(int, Fragment, String)} with the same arguments * given here." />
      <item value="he interval in millis that the user receives callbacks" />
      <item value="* Millis since epoch when alarm should stop." />
      <item value="seconds remaining" />
      <item value="Schedule a countdown until a time in the future, with * regular notifications on intervals along the way. *" />
      <item value="The amount of time until finished." />
      <item value="he amount of time until finished." />
      <item value="millis Until Finished" />
      <item value="on Tick" />
      <item value="The number of millis in the future from the call * to {@link #start()} until the countdown is done and {@link #onFinish()} * is called. * @param countDownInterval The interval along the way to receive * {@link #onTick(long)} callbacks." />
      <item value="ailed to transform file 'Msc.jar' to match attributes" />
      <item value="ould not resolve all files for configuration ':app:debugCompileClasspath'." />
      <item value="restore Save State" />
      <item value="move To State" />
      <item value="dump" />
      <item value="@deprecated use {@link #findViewHolderForLayoutPosition(int)} or * {@link #findViewHolderForAdapterPosition(int)}" />
      <item value="* * Return the ViewHolder for the item in the given position of the data set as of the latest * layout pass." />
      <item value="The position of the item in the data set of the adapter" />
      <item value="distribute Complete" />
      <item value="Affected" />
      <item value="Could not determine the dependencies of task ':flutter:compileDebugAidl'." />
      <item value="Only fullscreen opaque activities can request orientation" />
      <item value="m Is Recyclable Count" />
      <item value="Informs the recycler whether this item can be recycled. Views which are not * recyclable will not be reused for other items until setIsRecyclable() is * later set to true. Calls to setIsRecyclable() should always be paired (one * call to setIsRecyclabe(false) should always be matched with a later call to * setIsRecyclable(true)). Pairs of calls may be nested, as the state is internally * reference-counted." />
      <item value="Return the ViewHolder for the item in the given position of the data set. Unlike * {@link #findViewHolderForLayoutPosition(int)} this method takes into account any pending * adapter changes that may not be reflected to the layout yet. On the other hand, if * {@link Adapter#notifyDataSetChanged()} has been called but the new layout has not been * calculated yet, this method will return &lt;code&gt;null&lt;/code&gt; since the new positions of views * are unknown until the layout is calculated." />
      <item value="Called by RecyclerView to display the data at the specified position. This method should * update the contents of the {@link ViewHolder#itemView} to reflect the item at the given * position." />
      <item value="airbnb" />
      <item value="multidex" />
      <item value="get Velocity By Distance" />
      <item value="Edge Insets" />
      <item value="Unable to start activity ComponentInfo" />
      <item value="leading" />
      <item value="dynamic" />
      <item value="FLUTTER FRAGMENT PAGE URL" />
      <item value="a string consisting of exactly this sequence of characters" />
      <item value="* Returns a string representation of the object. In general, the * {@code toString} method returns a string that * &quot;textually represents&quot; this object. The result should * be a concise but informative representation that is easy for a * person to read. * It is recommended that all subclasses override this method." />
      <item value="uses Cleartext Traffic" />
      <item value="[StatefulWidget] and [State], for widgets that can build differently /// several times over their lifetime. /// * [InheritedWidget], for widgets that introduce ambient state that can /// be read by descendant widgets." />
      <item value="Scaffold" />
      <item value="A tap with a primary button has occurred. ///" />
      <item value="Gesture Detector" />
      <item value="To add custom fonts to your application, add a fonts section here, # in this &quot;flutter&quot; section. Each entry in this list should have a # &quot;family&quot; key with the font family name, and a &quot;fonts&quot; key with a # list giving the asset and other descriptors for the font. For" />
      <item value="you can quickly migrate your app by following the steps" />
      <item value="quickly" />
      <item value="Generated by pub" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="873" />
        <entry key="ENGLISH" value="874" />
        <entry key="POLISH" value="3" />
        <entry key="DANISH" value="2" />
        <entry key="FRENCH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>