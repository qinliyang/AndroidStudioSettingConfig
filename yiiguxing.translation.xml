<application>
  <component name="AppStorage">
    <histories>
      <item value="* If set, when sending a broadcast only registered receivers will be * called -- no BroadcastReceiver components will be launched. */" />
      <item value="By default a document created by {@link #FLAG_ACTIVITY_NEW_DOCUMENT} will * have its entry in recent tasks removed when the user closes it (with back * or however else it may finish()). If you would like to instead allow the * document to be kept in recents so that it can be re-launched, you can use * this flag. When set and the task's activity is finished, the recents * entry will remain in the interface for the user to re-launch it, like a * recents entry for a top-level application." />
      <item value="FLAG ACTIVITY RETAIN IN RECENTS" />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause a newly launching task to be placed on top of the current * home activity task (if there is one). That is, pressing back from the task * will always return the user to home even if that was not the last activity they * saw." />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause a newly launching task to be placed on top of the current * home activity task (if there is one). That is, pressing back from the task * will always return the user to home even if that was not the last activity they * saw. This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}. */" />
      <item value="FLAG ACTIVITY TASK ON HOME" />
      <item value="This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also * specified." />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause any existing task that would be associated with the * activity to be cleared before the activity is started. That is, the activity * becomes the new root of an otherwise empty task, and any old activities * are finished. This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}. */" />
      <item value="FLAG ACTIVITY NO ANIMATION" />
      <item value="FLAG ACTIVITY NO USER ACTION" />
      <item value="If set, this flag will prevent the normal {@link android.app.Activity#onUserLeaveHint} * callback from occurring on the current frontmost activity before it is * paused as the newly-started activity is brought to the front. *" />
      <item value="FLAG ACTIVITY REORDER TO FRONT" />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause the launched activity to be brought to the front of its * task's history stack if it is already running. * * &lt;p&gt;For example, consider a task consisting of four activities: A, B, C, D. * If D calls startActivity() with an Intent that resolves to the component * of activity B, then B will be brought to the front of the history stack, * with this resulting order: A, C, D, B. * * This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also * specified. */" />
      <item value="Demonstrates some basic types that you can use as parameters * and return values in AIDL." />
      <item value="enable Editing V Track" />
      <item value="identify" />
      <item value="valid" />
      <item value="Record" />
      <item value="Return true if the fragment has been hidden." />
      <item value="Remove an existing fragment. If it was added to a container, its view * is also removed from that container." />
      <item value="found" />
      <item value="otherwise" />
      <item value="The fragment if found or null otherwise." />
      <item value="if no such fragment is found, then all fragments currently * on the back stack associated with this ID are searched." />
      <item value="This first * searches through fragments that are currently added to the manager's * activity;" />
      <item value="Finds a fragment that was identified by the given id either when inflated * from XML or as the container ID when added in a transaction." />
      <item value="either" />
      <item value="identified" />
      <item value="Finds a fragment that was identified by the given id either when inflated * from XML or as the container ID when added in a transaction. This first * searches through fragments that are currently added to the manager's * activity; if no such fragment is found, then all fragments currently * on the back stack associated with this ID are searched. * @return The fragment if found or null otherwise." />
      <item value="Add a fragment to the activity state. This fragment may optionally * also have its view (if {@link Fragment#onCreateView Fragment.onCreateView} * returns non-null) inserted into a container view of the activity. *" />
      <item value="Replace an existing fragment that was added to a container. This is * essentially the same as calling {@link #remove(Fragment)} for all * currently added fragments that were added with the same containerViewId * and then {@link #add(int, Fragment, String)} with the same arguments * given here." />
      <item value="Optional tag name for the fragment, to later retrieve the * fragment with {@link FragmentManager#findFragmentByTag(String)" />
      <item value="Returns milliseconds running in the current thread." />
      <item value="Add this transaction to the back stack. This means that the transaction * will be remembered after it is committed, and will reverse its operation * when later popped off the stack." />
      <item value="Pop the top state off the back stack. This function is asynchronous -- it * enqueues the request to pop, but the action will not be performed until the * application returns to its event loop." />
      <item value="If set, this activity will become the start of a new task on this * history stack. A task (from the activity that started it to the * next task activity) defines an atomic group of activities that the * user can move to. Tasks can be moved to the foreground and background; * all of the activities inside of a particular task always remain in * the same order." />
      <item value="Move the task containing this activity to the back of the activity * stack. The activity's order within the task is unchanged. *" />
      <item value="* &lt;p&gt;This flag can not be used when the caller is requesting a result from * the activity being launched." />
      <item value="* Add an {@link OnItemTouchListener} to intercept touch events before they are dispatched * to child views or this view's standard scrolling behavior. *" />
      <item value="Add an {@link OnItemTouchListener} to intercept touch events before they are dispatched * to child views or this view's standard scrolling behavior. *" />
      <item value="When an object of a type is attached to an Editable, its methods will * be called when the text is changed." />
      <item value="broken" />
      <item value="disposed" />
      <item value="Generic" />
      <item value="Native Fetch Module" />
      <item value="* Returns the closest {@code int} to the argument, with ties * rounding to positive infinity. *" />
      <item value="Gets the current rating (number of stars filled)." />
      <item value="Retrieve the Drawable for the attribute at &lt;var&gt;index&lt;/var&gt;." />
      <item value="Specify a bounding rectangle for the Drawable. This is where the drawable * will draw when its draw() method is called." />
      <item value="set Requested Orientation" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="479" />
        <entry key="ENGLISH" value="480" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>