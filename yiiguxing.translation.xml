<application>
  <component name="AppStorage">
    <histories>
      <item value="draw indicator line" />
      <item value="if there is an offset, start interpolating left and right coordinates between current and next tab" />
      <item value="psts Text All Caps" />
      <item value="set Children Drawing Order Enabled" />
      <item value="millis Until Finished" />
      <item value="The interval along the way to receive * {@link #onTick(long)} callbacks." />
      <item value="* @param millisInFuture The number of millis in the future from the call * to {@link #start()} until the countdown is done and {@link #onFinish()} * is called." />
      <item value="faild" />
      <item value="Manually shows the next child." />
      <item value="psts Underline Color" />
      <item value="Run the message queue in this thread. Be sure to call * {@link #quit()} to end the loop." />
      <item value="Run the message queue in this thread. Be sure to call" />
      <item value="* Set the resize threshold to maintain at worst a 2/3 load factor." />
      <item value="Construct a new map initially containing (firstKey, firstValue). * ThreadLocalMaps are constructed lazily, so we only create * one when we have at least one entry to put in it." />
      <item value="Sets the current thread's copy of this thread-local variable * to the specified value. Most subclasses will have no need to * override this method, relying solely on the {@link #initialValue} * method to set the values of thread-locals. *" />
      <item value="Initialize the current thread as a looper. * This gives you a chance to create handlers that then reference * this looper, before actually starting the loop. Be sure to call * {@link #loop()} after calling this method, and end it by calling * {@link #quit()}." />
      <item value="quit Allowed" />
      <item value="Only one Looper may be created per thread" />
      <item value="the current thread's value of this thread-local */" />
      <item value="Variant of set() to establish initialValue. Used instead * of set() in case user has overridden the set() method. * * @return the initial value" />
      <item value="Returns the value in the current thread's copy of this * thread-local variable. If the variable has no value for the * current thread, it is first initialized to the value returned * by an invocation of the {@link #initialValue} method." />
      <item value="Creates a thread local variable." />
      <item value="Creates" />
      <item value="sThreadLocal.get() will return null unless you've called prepare()" />
      <item value="Constructs an empty Toast object. If looper is null, Looper.myLooper() is used." />
      <item value="/** * Make a standard toast that just contains a text view. * * @param context The context to use. Usually your {@link android.app.Application} * or {@link android.app.Activity} object. * @param text The text to show. Can be formatted text. * @param duration How long to display the message. Either {@link #LENGTH_SHORT} or * {@link #LENGTH_LONG} *" />
      <item value="Use Looper.myLooper() if looper is not specified." />
      <item value="Called by a ViewGroup subclass to remove child views from itself, * when it must first know its size on screen before it can calculate how many * child views it will render. An example is a Gallery or a ListView, which * may &quot;have&quot; 50 children, but actually only render the number of children * that can currently fit inside the object on screen. Do not call * this method unless you are extending ViewGroup and understand the * view measuring and layout pipeline. *" />
      <item value="Call this method to remove all child views from the * ViewGroup." />
      <item value="Only fullscreen opaque activities can request orientation" />
      <item value="* Indicates that the pager is in an idle, settled state. The current page * is fully in view and no animation is in progress." />
      <item value="Icon Tab Provider" />
      <item value="DECELERATION RATE" />
      <item value="* Returns Euler's number &lt;i&gt;e&lt;/i&gt; raised to the power of a * {@code double} value." />
      <item value="exp" />
      <item value="get Spline Fling Distance" />
      <item value="register Component" />
      <item value="fire Global Event Callback" />
      <item value="Sets the opacity of the view to a value from 0 to 1, where 0 means the view is * completely transparent and 1 means the view is completely opaque. *" />
      <item value="* Sets the opacity of the view to a value from 0 to 1, where 0 means the view is * completely transparent and 1 means the view is completely opaque." />
      <item value="blocks Descendants" />
      <item value="is Need Adjust Related View" />
      <item value="platform" />
      <item value="jcenter" />
      <item value="Information you can retrieve about a running process." />
      <item value="The name of the process this application should run in." />
      <item value="/** * The name of the process this application should run in. From the * &quot;process&quot; attribute or, if not set, the same as * &lt;var&gt;packageName&lt;/var&gt;. */" />
      <item value="ould not determine the dependencies of task" />
      <item value="sThreadLocal.get() will return null unless you've called prepare()." />
      <item value="s Thread Local" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="921" />
        <entry key="ENGLISH" value="922" />
        <entry key="POLISH" value="3" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>