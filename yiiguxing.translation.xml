<application>
  <component name="AppStorage">
    <histories>
      <item value="lint Options" />
      <item value="target Compatibility" />
      <item value="source Compatibility" />
      <item value="annotation Processor Options" />
      <item value="java Compile Options" />
      <item value="0 x 0" />
      <item value="refresh Consign Price Info" />
      <item value="refresh Pricing Strategy" />
      <item value="confirm" />
      <item value="Coupon" />
      <item value="is Disenble" />
      <item value="context is not instanceof Activity or Service, disable WXStat" />
      <item value="appplatform Type" />
      <item value="Fetch" />
      <item value="on Render Success" />
      <item value="share Banner Tap" />
      <item value="fire Global Event Callback" />
      <item value="webpageUrl is invalid" />
      <item value="Invite Get Bean" />
      <item value="messages" />
      <item value="render By Url" />
      <item value="is attached directly to an Activity" />
      <item value="label" />
      <item value="/** * Change the title associated with this activity. If this is a * top-level activity, the title for its window will change. If it * is an embedded activity, the parent can do whatever it wants * with it." />
      <item value="Send Verify Code" />
      <item value="collocation Accessories Put Off Shelves" />
      <item value="get Collocation Accessories By Stock Code" />
      <item value="receive Collocation Accessories" />
      <item value="close Container For Damage Stock" />
      <item value="** * &lt;p&gt;Computes the coordinates of this view in its window. The argument * must be an array of two integers. After the method returns, the array * contains the x and y location in that order.&lt;/p&gt; *" />
      <item value="&lt;p&gt;Causes the Runnable to be added to the message queue. * The runnable will be run on the user interface thread.&lt;/p&gt; *" />
      <item value="Returns true if the Runnable was successfully placed in to the * message queue. Returns false on failure, usually because the * looper processing the message queue is exiting." />
      <item value="with Draw Request" />
      <item value="ll气泡" />
      <item value="descendant Focusability" />
      <item value="blocks Descendants" />
      <item value="Topic Activity" />
      <item value="Revert" />
      <item value="Feedback" />
      <item value="Record" />
      <item value="Clothes Change Record Buy Fragment" />
      <item value="pending Order Id" />
      <item value="A functional interface (callback) that accepts a single value." />
      <item value="Returns true if this bitmap has been recycled. If so, then it is an error * to try to access its pixels, and the bitmap will not draw. *" />
      <item value="* Free the native object associated with this bitmap, and clear the * reference to the pixel data. This will not free the pixel data synchronously; * it simply allows it to be garbage collected if there are no other references. * The bitmap is marked as &quot;dead&quot;, meaning it will throw an exception if * getPixels() or setPixels() is called, and will draw nothing. This operation * cannot be reversed, so it should only be called if you are sure there are no * further uses for the bitmap. This is an advanced call, and normally need * not be called, since the normal GC process will free up this memory when * there are no more references to this bitmap." />
      <item value="getRunningAppProcesses: caller 10060 does not hold REAL_GET_TASKS; limiting output" />
      <item value="limiting" />
      <item value="AUDIT" />
      <item value="district" />
      <item value="consignee" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="91" />
        <entry key="ENGLISH" value="92" />
        <entry key="NORWEGIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>