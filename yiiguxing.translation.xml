<application>
  <component name="AppStorage">
    <histories>
      <item value="Constant for {@link #importance}: This process is running the * foreground UI; that is, it is the thing currently at the top of the screen * that the user is interacting with." />
      <item value="Context.startActivity(Intent, Bundle)} for more details." />
      <item value="&lt;p&gt;As a special case, if you call startActivityForResult() with a requestCode * &gt;= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your * activity, then your window will not be displayed until a result is * returned back from the started activity. This is to avoid visible * flickering when redirecting to another activity." />
      <item value="Note that this method should only be used with Intent protocols * that are defined to return a result. In other protocols (such as * {@link Intent#ACTION_MAIN} or {@link Intent#ACTION_VIEW}), you may * not get the result when you expect. For example, if the activity you * are launching uses {@link Intent#FLAG_ACTIVITY_NEW_TASK}, it will not * run in your task and thus you will immediately receive a cancel result. *" />
      <item value="Launch an activity for which you would like a result when it finished. * When this activity exits, your * onActivityResult() method will be called with the given requestCode. * Using a negative requestCode is the same as calling * {@link #startActivity} (the activity is not launched as a sub-activity). *" />
      <item value="with no options." />
      <item value="Modifies the standard behavior to allow results to be delivered to fragments. * This imposes a restriction that requestCode be &lt;= 0xffff." />
      <item value="Swipe Cards View" />
      <item value="* Shows a previously hidden fragment. This is only relevant for fragments whose * views have been added to a container, as this will cause the view to * be shown." />
      <item value="Call this when your activity is done and should be closed. The * ActivityResult is propagated back to whoever launched you via * onActivityResult()." />
      <item value="on Trim Memory" />
      <item value="The component launched as the first activity in the task. This can * be considered the &quot;application&quot; of this task." />
      <item value="Flag for {@link #moveTaskToFront(int, int)}: don't count this as a * user-instigated action, so the current activity will not receive a * hint that the user is leaving." />
      <item value="Flag for {@link #moveTaskToFront(int, int)}: also move the &quot;home&quot; * activity along with the task, so it is positioned immediately behind * the task." />
      <item value="Get the list of tasks associated with the calling application." />
      <item value="Additional operational flags." />
      <item value="he identifier of the task to be moved, as found in * {@link RunningTaskInfo} or {@link RecentTaskInfo}." />
      <item value="Additional options for the operation, either null or * as per {@link Context#startActivity(Intent, android.os.Bundle) * Context.startActivity(Intent, Bundle)" />
      <item value="Front" />
      <item value="Returns the index within this string of the first occurrence of the * specified substring." />
      <item value="Number of activities that are currently running (not stopped * and persisted) in this task." />
      <item value="Description of the task's current state." />
      <item value="A unique identifier for this task." />
      <item value="The stack that currently contains this task." />
      <item value="* The activity component at the top of the history stack of the task. * This is what the user is currently doing." />
      <item value="Information you can retrieve about a particular task that is currently * &quot;running&quot; in the system. Note that a running task does not mean the * given task actually has a process it is actively running in; it simply * means that the user has gone to it and never closed it, but currently * the system may have killed its process and is only holding on to its * last state in order to restart it when the user returns." />
      <item value="BANNER" />
      <item value="bound" />
      <item value="originally" />
      <item value="Service Connection" />
      <item value="leaked" />
      <item value="Returns a list of RunningTaskInfo records describing each of * the running tasks." />
      <item value="FLAG ACTIVITY REORDER TO FRONT" />
      <item value="* If set, when sending a broadcast only registered receivers will be * called -- no BroadcastReceiver components will be launched. */" />
      <item value="By default a document created by {@link #FLAG_ACTIVITY_NEW_DOCUMENT} will * have its entry in recent tasks removed when the user closes it (with back * or however else it may finish()). If you would like to instead allow the * document to be kept in recents so that it can be re-launched, you can use * this flag. When set and the task's activity is finished, the recents * entry will remain in the interface for the user to re-launch it, like a * recents entry for a top-level application." />
      <item value="FLAG ACTIVITY RETAIN IN RECENTS" />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause a newly launching task to be placed on top of the current * home activity task (if there is one). That is, pressing back from the task * will always return the user to home even if that was not the last activity they * saw." />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause a newly launching task to be placed on top of the current * home activity task (if there is one). That is, pressing back from the task * will always return the user to home even if that was not the last activity they * saw. This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}. */" />
      <item value="FLAG ACTIVITY TASK ON HOME" />
      <item value="This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also * specified." />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause any existing task that would be associated with the * activity to be cleared before the activity is started. That is, the activity * becomes the new root of an otherwise empty task, and any old activities * are finished. This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}. */" />
      <item value="FLAG ACTIVITY NO ANIMATION" />
      <item value="FLAG ACTIVITY NO USER ACTION" />
      <item value="If set, this flag will prevent the normal {@link android.app.Activity#onUserLeaveHint} * callback from occurring on the current frontmost activity before it is * paused as the newly-started activity is brought to the front. *" />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause the launched activity to be brought to the front of its * task's history stack if it is already running. * * &lt;p&gt;For example, consider a task consisting of four activities: A, B, C, D. * If D calls startActivity() with an Intent that resolves to the component * of activity B, then B will be brought to the front of the history stack, * with this resulting order: A, C, D, B. * * This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also * specified. */" />
      <item value="Demonstrates some basic types that you can use as parameters * and return values in AIDL." />
      <item value="enable Editing V Track" />
      <item value="identify" />
      <item value="valid" />
      <item value="Record" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="515" />
        <entry key="ENGLISH" value="516" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>