<application>
  <component name="AppStorage">
    <histories>
      <item value="* If some part of this view is not clipped by any of its parents, then * return that area in r in global (root) coordinates. To convert r to local * coordinates (without taking possible View rotations into account), offset * it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)). * If the view is completely clipped or translated out, return false. *" />
      <item value="* &lt;p&gt;Computes the coordinates of this view on the screen. The argument * must be an array of two integers. After the method returns, the array * contains the x and y location in that order.&lt;/p&gt; *" />
      <item value="* * &lt;p&gt;Computes the coordinates of this view in its window. The argument * must be an array of two integers. After the method returns, the array * contains the x and y location in that order.&lt;/p&gt; *" />
      <item value="DIAGONAL FROM TOP LEFT" />
      <item value="is Side Selection" />
      <item value="STATE COMPLETE" />
      <item value="false" />
      <item value="Value in pixels indicating the offset from position" />
      <item value="The end-user-visible name for the end product." />
      <item value="uncaughtException:Attempt to invoke virtual method 'void android.support.v7.widget.StaggeredGridLayoutManager$LayoutParams.setFullSpan(boolean)' on a null object reference" />
      <item value="Returns the number of spans laid out by this grid. *" />
      <item value="Sets the number of spans for the layout. This will invalidate all of the span assignments * for Views." />
      <item value="Sets the number of spans for the layout. This will invalidate all of the span assignments * for Views. * &lt;p&gt;" />
      <item value="pre Click Time Millis" />
      <item value="exchanged Prices When Need" />
      <item value="is Price Widget" />
      <item value="Staggered Grid Layout Manager" />
      <item value="promotion" />
      <item value="refresh Filter Panel" />
      <item value="This is an item change event, not a structural change event. It indicates that any * reflection of the data at &lt;code&gt;position&lt;/code&gt; is out of date and should be updated. * The item at &lt;code&gt;position&lt;/code&gt; retains the same identity." />
      <item value="sort" />
      <item value="additional Filter List" />
      <item value="Panel" />
      <item value="feed" />
      <item value="single Rent Price Crossed Text" />
      <item value="is Promotion" />
      <item value="box Slot" />
      <item value="{ if (HttpConfig.getInstacne().isVip()) { if (TextUtils.isEmpty(productBean.promotionTag)) { tvActivity.setVisibility(View.GONE); } else { tvActivity.setVisibility(View.VISIBLE); tvActivity.setText(productBean.promotionTag); } } else { if (TextUtils.isEmpty(productBean.singleRentPromotionTag)) { tvActivity.setVisibility(View.GONE); } else { tvActivity.setVisibility(View.VISIBLE); tvActivity.setText(productBean.singleRentPromotionTag); } } }" />
      <item value="promotion Tag" />
      <item value="Notify any registered observers that the item at &lt;code&gt;position&lt;/code&gt; has changed. * Equivalent to calling &lt;code&gt;notifyItemChanged(position, null);&lt;/code&gt;. *" />
      <item value="Drawer" />
      <item value="Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains all of the elements of the * specified collection." />
      <item value="add Icon Tab" />
      <item value="corners" />
      <item value="ring" />
      <item value="* Return the width of the your view." />
      <item value="consignee" />
      <item value="Solo" />
      <item value="Caches remote data with both {@link #DATA} and {@link #RESOURCE}, and local data with" />
      <item value="Tries to intelligently choose a strategy based on the data source of the" />
      <item value="Writes retrieved data directly to the disk cache before it's decoded." />
      <item value="Writes resources to disk after they've been decoded." />
      <item value="&lt;p&gt;This implementation iterates over the specified collection, * checking each element returned by the iterator in turn to see * if it's contained in this collection. If all elements are so * contained &lt;tt&gt;true&lt;/tt&gt; is returned, otherwise &lt;tt&gt;false&lt;/tt&gt;." />
      <item value="Record" />
      <item value="WAIT DELIVERY" />
      <item value="application-specific resource id." />
      <item value="Consign" />
      <item value="Enable nested scrolling." />
      <item value="促销优惠" />
      <item value="ViewPager does not have adapter instanc" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="201" />
        <entry key="ENGLISH" value="202" />
        <entry key="POLISH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>